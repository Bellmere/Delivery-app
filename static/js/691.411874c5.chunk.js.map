{"version":3,"file":"static/js/691.411874c5.chunk.js","mappings":"4LAmBWA,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,E,kGCnBPG,EAAc,SAAAC,GAAK,OAAIA,EAAMC,KAAKC,QAAf,EACnBC,EAAe,SAAAH,GAAK,OAAIA,EAAMC,KAAKG,KAAf,E,SCWpBC,EAAO,WAClB,OAA4CC,EAAAA,EAAAA,UAAS,MAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAYC,EAAAA,EAAAA,IAAYT,GACxBD,GAAWU,EAAAA,EAAAA,IAAYb,IAE7Bc,EAAAA,EAAAA,YAAU,WACRJ,GAASK,EAAAA,EAAAA,KACV,GAAE,CAACL,IAEJ,IA+BMM,EAAkB,SAAAC,GACtB,IAAMC,EAAeN,EAAUO,MAAK,SAAAC,GAAI,OAAIA,EAAKC,OAASJ,EAASI,IAA3B,IAExC,GAAIH,EACFR,GAASY,EAAAA,EAAAA,IAAiB,CAAE1B,GAAIsB,EAAatB,MAC7C2B,EAAAA,GAAAA,QAAc,6CACT,CACL,IAAMC,GAAO,kBACRP,GADQ,IAEXQ,IAAKC,EACLC,SAAU,EACV/B,GAAIN,MAENoB,GAASkB,EAAAA,EAAAA,IAAIJ,IACbD,EAAAA,GAAAA,QAAc,wCACf,CACF,EAOD,OACE,oBAASM,UAAU,OAAnB,UACE,SAACC,EAAA,EAAD,WACE,iBAAKD,UAAU,gBAAf,WACE,iBAAKA,UAAU,aAAf,WACE,iCACC1B,EAAS4B,KAAI,SAACX,EAAMY,GAAP,OACZ,mBACEH,UAAS,oBACPrB,IAAmBY,EAAKxB,GAAK,SAAW,IAE1CqC,KAAK,SAELC,QAAS,kBAjBGC,EAiBqBf,EAAKgB,SAhBlD3B,EAAkB0B,GADM,IAAAA,CAiBH,EANX,SAQGf,EAAKiB,OAHDjB,EAAKgB,IANA,QAahB,gBAAKP,UAAU,sBAAf,SACGrB,IAAkB,gBAAKqB,UAAU,gBAAf,SA1EL,WACtB,IAAMS,EAAmBnC,EAASgB,MAAK,SAAAC,GAAI,OAAIA,EAAKgB,MAAQ5B,CAAjB,IAE3C,OAAI8B,EACKA,EAAiBC,KAAKR,KAAI,SAAAd,GAC/B,OACE,iBAAKY,UAAU,aAAf,WACE,gBAAKA,UAAU,cAAf,UACE,gBAAKJ,IAAKC,EAAKc,IAAI,eAErB,iBAAKX,UAAU,gBAAf,WACE,wBAAKZ,EAASI,QACd,oCAAYJ,EAASwB,aAEvB,gBAAKZ,UAAU,kBAAf,UACE,mBACEA,UAAU,sBACVI,KAAK,SACLC,QAAS,kBAAMlB,EAAgBC,EAAtB,EAHX,6BAT6BA,EAASmB,IAmB7C,IAGI,IACR,CA6C4DM,aAM9D,ECrGc,SAASC,IACtB,OACE,+BACE,SAAC,EAAD,KAGL,C","sources":["../node_modules/nanoid/index.browser.js","redux/MenuSlice/selectors.js","components/Menu/Menu.jsx","pages/Home.jsx"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","export const getMenuList = state => state.menu.menuList;\nexport const getMenuItems = state => state.menu.items;\n","import React, { useState, useEffect } from 'react';\nimport { nanoid } from 'nanoid';\nimport { Container } from '../styled/Container';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { add, increaseQuantity } from 'redux/MenuSlice/MenuSlice';\nimport { toast } from 'react-toastify';\nimport cat from '../../Images/sad-cat.png';\nimport { fetchMenu } from 'redux/MenuSlice/operations';\nimport { getMenuList, getMenuItems } from 'redux/MenuSlice/selectors';\n\nimport './Menu.css';\n\nexport const Menu = () => {\n  const [selectedButton, setSelectedButton] = useState(null);\n  const dispatch = useDispatch();\n  const menuItems = useSelector(getMenuItems);\n  const menuList = useSelector(getMenuList);\n\n  useEffect(() => {\n    dispatch(fetchMenu());\n  }, [dispatch]);\n\n  const renderFoodItems = () => {\n    const selectedMenuItem = menuList.find(item => item._id === selectedButton);\n\n    if (selectedMenuItem) {\n      return selectedMenuItem.food.map(foodItem => {\n        return (\n          <div className=\"food__item\" key={foodItem._id}>\n            <div className=\"food__photo\">\n              <img src={cat} alt=\"sad cat\" />\n            </div>\n            <div className=\"food__details\">\n              <h3>{foodItem.name}</h3>\n              <p>Price: ${foodItem.price}</p>\n            </div>\n            <div className=\"food__add--wrap\">\n              <button\n                className=\"menu__btn food__add\"\n                type=\"button\"\n                onClick={() => handleAddToCart(foodItem)}\n              >\n                Add to Cart\n              </button>\n            </div>\n          </div>\n        );\n      });\n    }\n\n    return null;\n  };\n\n  const handleAddToCart = foodItem => {\n    const existingItem = menuItems.find(item => item.name === foodItem.name);\n\n    if (existingItem) {\n      dispatch(increaseQuantity({ id: existingItem.id }));\n      toast.success('The item quantity has been increased.');\n    } else {\n      const newItem = {\n        ...foodItem,\n        src: cat,\n        quantity: 1,\n        id: nanoid(),\n      };\n      dispatch(add(newItem));\n      toast.success('The item has been added successfully.');\n    }\n  };\n\n\n  const handleButtonClick = buttonId => {\n    setSelectedButton(buttonId);\n  };\n\n  return (\n    <section className=\"menu\">\n      <Container>\n        <div className=\"menu--wrapper\">\n          <div className=\"menu__list\">\n            <h2>Menu</h2>\n            {menuList.map((item, index) => (\n              <button\n                className={`menu__btn ${\n                  selectedButton === item.id ? 'active' : ''\n                }`}\n                type=\"button\"\n                key={item._id}\n                onClick={() => handleButtonClick(item._id)}\n              >\n                {item.title}\n              </button>\n            ))}\n          </div>\n          <div className=\"menu__content--wrap\">\n            {selectedButton && <div className=\"menu__content\">{renderFoodItems()}</div>}\n          </div>\n        </div>\n      </Container>\n    </section>\n  );\n};\n\n","import { Menu } from 'components/Menu/Menu';\nexport default function Home() {\n  return (\n    <>\n      <Menu />\n    </>\n  );\n}\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","getMenuList","state","menu","menuList","getMenuItems","items","Menu","useState","selectedButton","setSelectedButton","dispatch","useDispatch","menuItems","useSelector","useEffect","fetchMenu","handleAddToCart","foodItem","existingItem","find","item","name","increaseQuantity","toast","newItem","src","cat","quantity","add","className","Container","map","index","type","onClick","buttonId","_id","title","selectedMenuItem","food","alt","price","renderFoodItems","Home"],"sourceRoot":""}